---
version: 2.1

orbs:
  terraform: twdps/terraform@0.4.0
  # can override kubectl, awspec versions as necessary
  kube: twdps/kube-ops@0.2.0
  # used for github-release-notes feature
  executor-tools: twdps/executor-tools@0.2.0

# ==== global pipeline parameters

parameters:
  context:
    description: circleci context for all jobs
    type: string
    default: twdps-core-labs-team
  shell-options:
    description: shell options for all jobs
    type: string
    default: secrethub run --env-file secrethub.nonprod.env -- /bin/bash -eo pipefail
  terraform-version:
    description: terraform version for all jobs
    type: string
    default: "1.1.5"
  datadog-version:
    description: datadog cli version for all jobs
    type: string
    default: "0.43.0"
  executor-image:
    description: image to use for local jobs
    type: string
    default: twdps/circleci-kube-ops:alpine-0.5.0

# git push: deploy sandbox
on-push-main: &on-push-main
  branches:
    only: /main/
  tags:
    ignore: /.*/

# git tag: release to preview cluster
on-tag-main: &on-tag-main
  branches:
    ignore: /.*/
  tags:
    only: /.*/

commands:

  set-environment:
    description: generate environment credentials and configuration from templates
    parameters:
      cluster:
        description: cluster environment
        type: string
    steps:
      - run:
          name: set ~/.terraformrc
          command: secrethub inject -i tpl/terraformrc.tpl -o ~/.terraformrc
      - run:
          name: set << parameters.cluster >> environment variables
          command: |
            secrethub inject -i environments/<< parameters.cluster >>.auto.tfvars.json.tpl -o << parameters.cluster >>.auto.tfvars.json

  set-kubeconfig:
    parameters:
      cluster:
        description: cluster to configure
        type: string
    steps:
      - run:
          name: setup kubeconfig and deploy core services
          command: |
            mkdir -p ~/.kube
            SECRETHUB_VAR_ENV=<< parameters.cluster >> secrethub inject -i tpl/kubeconfig.tpl -o ~/.kube/config

jobs:

  deploy-core-services:
    docker:
      - image: << pipeline.parameters.executor-image >>
    shell: << pipeline.parameters.shell-options >>
    parameters:
      cluster:
        description: cluster to configure
        type: string
    steps:
      - checkout
      - setup_remote_docker
      - kube/packages:
          terraform-version: << pipeline.parameters.terraform-version >>
          datadog-version: << pipeline.parameters.datadog-version >>
      - set-environment:
          cluster: << parameters.cluster >>
      - set-kubeconfig:
          cluster: << parameters.cluster >>
      - run:
          name: deploy metrics-server
          command: bash scripts/deploy_metrics_server.sh << parameters.cluster >>
      - run:
          name: deploy kube-state-metrics
          command: bash scripts/deploy_kube_state_metrics.sh << parameters.cluster >>
      - run:
          name: deploy cluster-autoscaler
          command: bash scripts/deploy_cluster_autoscaler.sh << parameters.cluster >>
      - run:
          name: deploy aws-efs-csi-driver
          command: bash scripts/deploy_efs_csi_driver.sh << parameters.cluster >>
      - run:
          name: deploy datadog agents
          command: bash scripts/deploy_datadog_agent.sh << parameters.cluster >>
      - run:
          name: deploy core-services-resources
          command: bash scripts/deploy_core_service_resources.sh << parameters.cluster >>
      - run:
          name: post deployment event to datadog
          command: dog event post --tags "cluster:sandbox, deployment:lab-platform-eks-core-services" Deploy 'lab-platform-eks-core-services'

  validate-core-services:
    docker:
      - image: << pipeline.parameters.executor-image >>
    shell: << pipeline.parameters.shell-options >>
    parameters:
      cluster:
        description: cluster to configure
        type: string
    steps:
      - checkout
      - setup_remote_docker
      - kube/packages:
          terraform-version: << pipeline.parameters.terraform-version >>
      - set-environment:
          cluster: << parameters.cluster >>
      - set-kubeconfig:
          cluster: << parameters.cluster >>
      - run:
          name: smoketest core services
          command: bash scripts/validate_core_services.sh << parameters.cluster >>
      # - run:
      #     name: conformance tests
      #     command: bash scripts/sonobuoy_conformance_test.sh << parameters.cluster >> quick

  update-monitors:
    parameters:
      cluster:
        description: cluster monitors to update
        type: string
    docker:
      - image: << pipeline.parameters.executor-image >>
    shell: << pipeline.parameters.shell-options >>
    steps:
      - checkout
      - setup_remote_docker
      - set-environment:
          cluster: << parameters.cluster >>
      - run:
          name: install requirements
          command: pip install -r requirements.txt
      - run:
          name: update datadog cluster monitors
          command: python scripts/deploy_monitors.py << parameters.cluster >>

  # version-check:
  #   docker:
  #     - image: << pipeline.parameters.executor-image >>
  #   shell: << pipeline.parameters.shell-options >>
  #   parameters:
  #     cluster:
  #       description: cluster to configure
  #       type: string
  #   steps:
  #     - checkout
  #     - setup_remote_docker
  #     - set-kubeconfig:
  #         cluster: << parameters.cluster >>
  #     - run:
  #         name: install python script requirements
  #         command: pip install -r requirements.txt
  #     - run:
  #         name: smoketest core services
  #         command: python scripts/versions.py

  refresh-nodes:
    docker:
      - image: << pipeline.parameters.executor-image >>
    shell: << pipeline.parameters.shell-options >>
    parameters:
      cluster:
        description: cluster to configure
        type: string
    steps:
      - checkout
      - setup_remote_docker
      - set-environment:
          cluster: << parameters.cluster >>
      - set-kubeconfig:
          cluster: << parameters.cluster >>
      - run:
          name: cordon, drain, and delete 1/4 of the node group nodes
          command: bash scripts/refresh_nodes.sh << parameters.cluster >>


  # update multi-cluster dashboard
  update-dashboard:
    docker:
      - image: << pipeline.parameters.executor-image >>
    shell: << pipeline.parameters.shell-options >>
    steps:
      - checkout
      - setup_remote_docker
      - set-environment:
          cluster: sandbox
      - run:
          name: install requirements
          command: pip install -r requirements.txt
      - run:
          name: update lab-platform-eks-core-services dashboard
          command: bash scripts/deploy_dashboard.sh

workflows:
  version: 2

  lab-platform-eks-core-services-pipeline:
    jobs:

      # create oidc assumable roles for core services as necessary
      - terraform/apply:
          name: apply-sandbox-core-service-roles
          context: << pipeline.parameters.context >>
          shell: << pipeline.parameters.shell-options >>
          workspace: sandbox
          terraform-version: << pipeline.parameters.terraform-version >>
          before-terraform:
            - set-environment:
                cluster: sandbox
          filters: *on-push-main

      - deploy-core-services:
          name: deploy-sandbox-core-services
          context: << pipeline.parameters.context >>
          cluster: sandbox
          requires:
            - apply-sandbox-core-service-roles
          filters: *on-push-main

      - validate-core-services:
          name: validate-sandbox-core-services
          context: << pipeline.parameters.context >>
          cluster: sandbox
          requires:
            - deploy-sandbox-core-services
          filters: *on-push-main

      - update-monitors:
          name: update-sandbox-monitors
          context: << pipeline.parameters.context >>
          cluster: sandbox
          requires:
            - validate-sandbox-core-services
          filters: *on-push-main

      # release to preview cluster
      - terraform/apply:
          name: apply-preview-core-service-roles
          context: << pipeline.parameters.context >>
          shell: << pipeline.parameters.shell-options >>
          workspace: preview
          terraform-version: << pipeline.parameters.terraform-version >>
          before-terraform:
            - set-environment:
                cluster: preview
          filters: *on-tag-main

      - deploy-core-services:
          name: deploy-preview-core-services
          context: << pipeline.parameters.context >>
          cluster: preview
          requires:
            - apply-preview-core-service-roles
          filters: *on-tag-main

      - validate-core-services:
          name: validate-preview-core-services
          context: << pipeline.parameters.context >>
          cluster: preview
          requires:
            - deploy-preview-core-services
          filters: *on-tag-main

  generate-release-notes:
    jobs:
      - executor-tools/release:
          name: release-lab-platform-eks-core-services
          context: << pipeline.parameters.context >>
          shell: << pipeline.parameters.shell-options >>
          filters: *on-tag-main

  lab-platform-eks-core-services-monitors:
    jobs:
      - update-monitors:
          name: update-sandbox-monitors
          context: << pipeline.parameters.context >>
          cluster: sandbox
          filters: *on-push-main

      - approve-preview-monitors:
          type: approval
          requires:
            - update-sandbox-monitors
          filters: *on-push-main

      - update-monitors:
          name: update-preview-monitors
          context: << pipeline.parameters.context >>
          cluster: preview
          requires:
            - approve-preview-monitors
          filters: *on-push-main

  lab-platform-eks-core-services-dashboard:
    jobs:
      - update-dashboard:
          name: update-datadog-dashboard
          context: << pipeline.parameters.context >>
          filters: *on-push-main

  nightly-validation:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - main
    jobs:
      - refresh-nodes:
          name: refresh-sandbox-nodes
          context: << pipeline.parameters.context >>
          cluster: sandbox
      - refresh-nodes:
          name: refresh-preview-nodes
          context: << pipeline.parameters.context >>
          cluster: preview
      - validate-core-services:
          name: validate-sandbox-cluster
          context: << pipeline.parameters.context >>
          cluster: sandbox
      - validate-core-services:
          name: validate-preview-cluster
          context: << pipeline.parameters.context >>
          cluster: preview
      - update-dashboard:
          name: update-datadog-dashboard
          context: << pipeline.parameters.context >>
